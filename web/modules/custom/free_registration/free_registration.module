<?php

use Drupal\group\Entity\Group;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\FormState;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\group\Entity\GroupContent;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Extension\ModuleHandlerInterface;
use Drupal\Core\Render\Markup;
use Symfony\Component\HttpFoundation\Request;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\profile\Entity\Profile;
use Drupal\profile\Entity\ProfileType;
use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
use Drupal\Core\Breadcrumb\Breadcrumb;
use \Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Controller\ControllerBase;
use Drupal\comment\CommentInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\taxonomy\Entity\Term;
use \Drupal\Core\Datetime\DrupalDateTime;
use Drupal\message\Entity\Message;
use Drupal\group\Entity\GroupContentInterface;
use Drupal\editor\Entity\Editor;
use Drupal\views\Plugin\views\relationship\RelationshipPluginBase;
use Drupal\views\Annotation\ViewsJoin;
use \Drupal\views\Plugin\views\query\Sql;
use Drupal\image\Entity\ImageStyle;
use Drupal\block\Entity\Block;
use Drupal\views\Plugin\views\display\DisplayPluginBase;
use Symfony\Component\HttpFoundation\RequestStack;
use Drupal\Core\Path\CurrentPathStack;

function free_registration_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
	if ($form_id == 'node_free_registration_edit_form') {

		$param = \Drupal::request()->query->all();

		if (array_key_exists("mode", $param)) {
			$mode = $param['mode'];
			if ($mode == 'abstract_note') {

				$form['field_abstract']['#access'] = false;
				$form['body']['#access'] = false;
				$form['field_conference']['#access'] = false;
				$form['field_email']['#access'] = false;
				$form['field_first_name']['#access'] = false;
				$form['field_la']['#access'] = false;
				$form['field_organisation']['#access'] = false;
				$form['field_title']['#access'] = false;
				$form['title']['#access'] = false;
				$form['field_nationality']['#access'] = false;
				$form['field_country_of_residence']['#access'] = false;
				$form['field_gender']['#access'] = false;
				$form['field_abstract_strands']['#access'] = false;
				$form['field_language']['#access'] = false;
				$form['field_pre_registration_status']['#access'] = false;
				$form['status']['#access'] = false;
				//~ $form['revision_information']['#access'] = FALSE;
				//~ $form['author']['#access'] = FALSE;			
				//~ $form['options']['#access'] = FALSE;
				//~ $form['meta']['#access'] = FALSE;
			}
		}
		
		$current_path = \Drupal::service('path.current')->getPath();
		$path_parts = explode('/', $current_path);
		$nid = $path_parts[2];
		
		$node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
		
		$conf_id = $node->get('field_conference')->getValue();  
		$conf_id = $conf_id[0]['target_id'];
		
		$entity_type_manager = \Drupal::entityTypeManager();
		$term_storage = $entity_type_manager->getStorage('taxonomy_term');


		$term_query = $term_storage->getQuery()
			->condition('vid', 'abstract_strands')
			->condition('field_conferences', $conf_id)
			->accessCheck(FALSE);

		$tids = $term_query->execute();


		$terms = $term_storage->loadMultiple($tids); 
		$term_names = [];

		foreach ($terms as $term) {
			$term_names[$term->id()] = $term->getName();
		}
		
		if (!empty($term_names) && isset($form['field_abstract_strands'])) {
			$form['field_abstract_strands']['widget']['#options'] = [];
			//$form['field_abstract_strands']['widget']['#options']['N/A'] = t('N/A');
			foreach ($term_names as $tid => $name) {
				$form['field_abstract_strands']['widget']['#options'][$tid] = $name;
			}
		}
		
		else {
			
			$form['field_abstract_strands']['widget']['#options'] = [];
			//$form['field_abstract_strands']['widget']['#options']['N/A'] = t('N/A');
		}
				
	}
	if ($form_id == 'taxonomy_term_abstract_strands_form') {
		$param = \Drupal::request()->query->all();

		if (array_key_exists("mode", $param)) {
			$mode = $param['mode'];
			if ($mode == 'existing') {
		
		$form['name']['#access'] = false;
		$form['description']['#access'] = false;
		$form['status']['#access'] = false;
		$form['path']['#access'] = FALSE;
		$form['revision_log_message']['#access'] = FALSE;
		$form['relations']['#access'] = FALSE;
		
	}
}
}
if ($form_id == 'taxonomy_term__invitation_types__form') {
		$param = \Drupal::request()->query->all();

		if (array_key_exists("mode", $param)) {
			$mode = $param['mode'];
			if ($mode == 'existing') {
		
		$form['name']['#access'] = false;
		$form['description']['#access'] = false;
		$form['field_conference_fee']['#access'] = false;
		$form['field_workshop_fee']['#access'] = FALSE;
		
		$form['relations']['#access'] = FALSE;
		
	}
}
}	
	if ($form_id == 'taxonomy_term__invitation_categories_form') {
		$param = \Drupal::request()->query->all();

		if (array_key_exists("mode", $param)) {
			$mode = $param['mode'];
			if ($mode == 'existing') {
		
		$form['name']['#access'] = false;
		$form['description']['#access'] = false;
		$form['field_bursary_allowed']['#access'] = false;
		
		$form['revision_log_message']['#access'] = FALSE;
		$form['relations']['#access'] = FALSE;
		$form['path']['#access'] = FALSE;
		$form['status']['#access'] = false;
	}
}
}

	if ($form_id == 'simple_custom_form') {

		$current_path = \Drupal::service('path.current')->getPath();
		$path = explode("/", $current_path);

		if ($path[3] == 'verify' || $path[3] == 'final') {

			$form['first_name']['#attributes'] = array('readonly' => 'readonly');
			$form['last_name']['#attributes'] = array('readonly' => 'readonly');
			$form['email']['#attributes'] = array('readonly' => 'readonly');
		}

		if ($path[3] != 'verify' && $path[3] != 'final' && $path[3] != 'initiate') {

			$form['#access'] = FALSE;
		}
	}
}

function free_registration_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
	
	if($form['#id'] == "views-exposed-form-bursary-applicants-page-4") {
	$current_path = \Drupal::service('path.current')->getPath();
		$path_parts = explode('/', $current_path);
		$conf_id = end($path_parts);
		$entity_type_manager = \Drupal::entityTypeManager();
		$term_storage = $entity_type_manager->getStorage('taxonomy_term');


		$term_query = $term_storage->getQuery()
			->condition('vid', 'abstract_strands')
			->condition('field_conferences', $conf_id)
			->accessCheck(FALSE);

		$tids = $term_query->execute();


		$terms = $term_storage->loadMultiple($tids);
		$term_names = [];

		foreach ($terms as $term) {
			$term_names[$term->id()] = $term->getName();
		}
		

		if (!empty($term_names) && isset($form['field_abstract_strands_target_id'])) {

			$form['field_abstract_strands_target_id']['#options'] = [];

			$form['field_abstract_strands_target_id']['#options']['All'] = t('- Any -');
			foreach ($term_names as $tid => $name) {
				$form['field_abstract_strands_target_id']['#options'][$tid] = $name;
			}
		}else {
			
			$form['field_abstract_strands_target_id']['#options'] = [
				'All' => t('- Any -'),
			];
		}
	}
	if($form['#id'] == "views-exposed-form-invitee-list-page-1") {
	$current_path1 = \Drupal::service('path.current')->getPath();
		$path_parts1 = explode('/', $current_path1);
		$conf_id1 = end($path_parts1);

		$entity_type_manager1 = \Drupal::entityTypeManager();
		$term_storage1 = $entity_type_manager1->getStorage('taxonomy_term');


		$term_query1 = $term_storage1->getQuery()
			->condition('vid', '_invitation_types_')
			->condition('field_conference', $conf_id1)
			->accessCheck(FALSE);

		$tids1 = $term_query1->execute();


		$terms1 = $term_storage1->loadMultiple($tids1);
		$term_names1 = [];

		foreach ($terms1 as $term1) {
			$term_names1[$term1->id()] = $term1->getName();
		}
		

		if (!empty($term_names1) && isset($form['field_invitation_type_target_id'])) {

			$form['field_invitation_type_target_id']['#options'] = [];

			$form['field_invitation_type_target_id']['#options']['All'] = t('- Any -');
			foreach ($term_names1 as $tid1 => $name1) {
				$form['field_invitation_type_target_id']['#options'][$tid1] = $name1;
			}
		}else {
			
			$form['field_abstract_strands_target_id']['#options'] = [
				'All' => t('- Any -'),
			];
		}
	}
}

/**
 * Hook preprocess_html()
 */
function free_registration_preprocess_html(&$variables) {
	$request_stack = \Drupal::service('request_stack');
    $request = $request_stack->getCurrentRequest();
  $current_path = \Drupal::service("path.current")->getPath();
  $path = explode("/", $current_path);
  $node = \Drupal::routeMatch()->getParameter('node');
  $destination = $request->query->get('destination', '');
	  $destination = explode("/", $destination);
	  $destination = $destination[1];
 $query_params = $request->query->all();
 $param_value = $request->query->get('mode', ''); 
   
  if ($node) {
    $node_id = $node->id();
    if ($node_id > 0) {
      $type = $node->type->target_id;
      if ($path[3] == 'edit') { 
        if ($type == 'free_registration') {
			if ($param_value == 'abstract_note') {
          $variables['#attached']['library'][] = 'free_registration/common-styling';
          
        }
	}
	if ($type == 'participant_conference_metas') {
			if ($param_value == 'note' || $param_value == 'abstract_decision' || $param_value == 'abstract_note') {
          $variables['#attached']['library'][] = 'free_registration/common-styling';
          $variables['attributes']['class'][] = 'hide-published';
          
        }
	}
      }
      
    }
  }
  if ($path[4] == 'edit') { 
	  if($destination = "add-existing-invitation-category" || $destination = "add-existing-invitation-type" || $destination = "add-existing-abstract-strands") {	 	 
			if ($param_value == 'existing') {     
          $variables["attributes"]["class"][]  = "simple-xml";
          $variables['#attached']['library'][] = 'free_registration/common-styling';
        }
	}
	 }
}


/**
 * Implements hook_entity_presave().
 */

function free_registration_node_presave(EntityInterface $entity) {
  
 
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'free_registration') {

    $country_values = $entity->get('field_country_of_residence')->getValue();

    $selected_countries = [];

    foreach ($country_values as $value) {
      $selected_countries[] = $value['target_id'];
     
    }
    $entity->set('field_participant_countries', $selected_countries);
  }
  
  
}
